{
  "Diegoarango20/act_web1_s4": {
    "repositoryUrl": "Diegoarango20/act_web1_s4",
    "studentName": "Diego Alejandro  Arango",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función calcula correctamente el cuadrado de un número. El código es limpio y fácil de entender. Buen trabajo."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, funcional y utiliza el valor por defecto correctamente. Cumple con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, utiliza la función `reduce` de manera eficiente y resuelve correctamente el problema planteado."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza una IIFE correctamente para imprimir el mensaje al definirse la función. El código es conciso y cumple con el objetivo."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, implementando recursividad como se solicitó. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando `filter` de manera eficiente. El código es legible y funcional."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, correcto y utiliza una función flecha como se solicitó. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución es concisa, correcta y cumple con los requisitos del ejercicio. El uso de `setTimeout` con una función anónima es adecuado."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código implementa correctamente un contador privado usando una IIFE y closure. La solución es concisa y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza recursión de manera eficiente para calcular el factorial. El código es claro y conciso."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código es limpio y fácil de entender, demostrando una buena aplicación de los conceptos."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente al utilizar `reduce`. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 1,
        "fileFound": true,
        "feedback": "El código proporcionado no resuelve el problema planteado (reemplazar espacios por guiones). En cambio, multiplica los elementos de un arreglo. Debes implementar la función que reemplace los espacios por guiones usando una expresión de función."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y utiliza correctamente una IIFE con closure para mantener el estado del contador, cumpliendo con la descripción del problema."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando recursión de manera eficiente para invertir la cadena. El código es legible y fácil de entender."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no cumple con la descripción de la actividad, que solicitaba una función flecha con parámetro rest para sumar un número variable de argumentos. En cambio, presenta una función 'operacion' que recibe un callback."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código cumple con el objetivo de la actividad y presenta una buena estructura, demostrando un entendimiento claro de las funciones de orden superior."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función cumple con los requisitos básicos, pero es una validación muy simple. Podrías mejorarla utilizando expresiones regulares para una validación más robusta de la sintaxis del correo electrónico."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza una función anónima dentro de `setTimeout` como se esperaba. El código es legible y funcional."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y utiliza la función flecha como se solicitó. El código es limpio y fácil de entender, implementando buenas prácticas con el uso de `reduce`."
      }
    ],
    "overallScore": 4.55,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:11:26.800Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "sepumarcela/act_web1_s4": {
    "repositoryUrl": "sepumarcela/act_web1_s4",
    "studentName": "Yuly Marcela Sepulveda Sepulveda",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con la descripción de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad, incluyendo el uso de una función de expresión y el valor por defecto para el parámetro 'nombre'."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Aunque se pedía una función flecha, la lógica implementada es clara y concisa. Para la próxima, intenta usar la sintaxis de función flecha como se solicita en la descripción."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos del ejercicio, utilizando una IIFE para imprimir el mensaje al definirse la función. El código es conciso y fácil de entender."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 2,
        "fileFound": true,
        "feedback": "La solución funciona correctamente, pero no utiliza recursión como se solicitaba.  Deberías implementar la función de forma recursiva para cumplir con los requisitos de la actividad."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, aunque podría implementarse usando el método `filter` de los arreglos para que sea una función de orden superior como se solicita. El código es legible."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y utiliza una función flecha como se solicitó. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con el requerimiento. Podrías haber usado directamente una función anónima dentro de setTimeout en lugar de declarar una función aparte."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, implementando un IIFE con closure para mantener el contador privado. El código es limpio y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 2,
        "fileFound": true,
        "feedback": "El código contiene un error lógico: la sentencia `return numero * factorial(numero - 1)` nunca se ejecuta porque está después de `return 1` dentro del bloque `if`. Además, falta considerar el caso cuando el número es negativo (aunque no se especificó en la descripción)."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Utiliza el operador módulo de manera adecuada para determinar si un número es par."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza `reduce` de forma eficiente para multiplicar los elementos del arreglo. El código es claro y conciso, siguiendo las buenas prácticas."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza el método `replace` con una expresión regular para reemplazar todos los espacios, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! Cumple con todos los requisitos: utiliza una IIFE con closure para mantener el contador privado y genera IDs únicos correctamente. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente al usar recursión para invertir la cadena. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es claro, conciso y utiliza correctamente la función flecha y el parámetro rest."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, cumpliendo con todos los requisitos de la actividad. El código es limpio y fácil de entender, implementando adecuadamente una función de orden superior."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función cumple con los requisitos básicos, pero no es una validación completa de un correo electrónico (ej: no verifica si hay caracteres antes del @ o después del .com). Considera usar expresiones regulares para una validación más robusta."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos del problema. El uso de setTimeout y la función anónima es adecuado."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el uso de función flecha y el cálculo del promedio."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:16:00.645Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "MarioMunera1993/act_web1_s4": {
    "repositoryUrl": "MarioMunera1993/act_web1_s4",
    "studentName": "Mario Alonso Munera Velez",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función calcula correctamente el cuadrado de un número. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. Utiliza una función flecha y un bucle for para sumar los elementos del arreglo, cumpliendo con los requisitos. El código es legible y bien estructurado."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso y cumple perfectamente con la definición de una IIFE para imprimir el mensaje solicitado."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente al usar recursión. El código es limpio y fácil de entender, cumpliendo con el objetivo de la actividad. Buena implementación."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza la función `filter` de manera eficiente para cumplir con el objetivo."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una función flecha de manera eficiente para convertir la cadena a mayúsculas. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza correctamente `setTimeout` con una función anónima y cumple con la descripción de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, implementa una IIFE con closure para mantener el contador privado. El código es conciso y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función no retorna un valor booleano (true/false) como debería. Además, imprime 'Es Impar' siempre, independientemente de si el número es par o no. Falta un `else` en la condicional."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza `reduce` adecuadamente. Considera añadir validación para asegurar que la entrada sean números y mejorar la robustez del código ante entradas incorrectas."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza la función `replace` con una expresión regular para reemplazar todos los espacios, demostrando buen conocimiento del lenguaje."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza correctamente una IIFE y un closure para mantener el estado del contador, generando IDs únicos como se esperaba. El código es limpio y funcional."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza recursión de manera eficiente para invertir la cadena. El código es claro y conciso."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza correctamente la función flecha con el parámetro rest y reduce para sumar los argumentos. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y funcional, demostrando una correcta comprensión de las funciones de orden superior y callbacks en JavaScript."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función cumple con los requisitos básicos, pero es demasiado simplista. No valida la estructura completa de un correo electrónico, solo la presencia de '@' y que termine en '.com'. Se recomienda usar una expresión regular para una validación más robusta."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve el problema planteado usando una función anónima con `setTimeout` correctamente."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es concisa, correcta y utiliza una función flecha como se solicitó. El código es legible y aplica buenas prácticas al usar `reduce` para calcular la suma."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: ejercicios/ejercicio_10.js"
    ],
    "evaluatedAt": "2025-08-21T21:22:29.846Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Julio28012020/act_web1_s4": {
    "repositoryUrl": "Julio28012020/act_web1_s4",
    "studentName": "Roque Aldana",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. La función calcula el cuadrado correctamente y los ejemplos de uso son claros."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, correcto y aplica buenas prácticas al usar el valor por defecto en el parámetro de la función. Bien hecho."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 2,
        "fileFound": true,
        "feedback": "La función solo suma tres números, no todos los elementos de un arreglo.  Deberías iterar sobre el arreglo para sumar todos sus elementos."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y usa una IIFE. Se sugiere revisar la ortografía en el mensaje (¡Bienvenido!)."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza recursión correctamente para contar las vocales. Bien hecho."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza correctamente la función `filter` para resolver el problema. Los ejemplos de prueba son adecuados."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y resuelve correctamente el problema utilizando una función flecha como se solicitó."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función setTimeout se implementa correctamente con una función anónima. Sin embargo, el orden de los console.log puede ser confuso, ya que 'Temporizador -3 segundos' se imprime antes del mensaje del temporizador. Considera la claridad en el orden de ejecución."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución cumple con todos los requisitos utilizando una IIFE y closure para mantener el contador privado. El código es conciso, funcional y sigue las buenas prácticas."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución recursiva para el cálculo del factorial. El código es conciso, legible y funcional, e incluye casos base correctos y pruebas con varios ejemplos."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función esPar cumple correctamente con la descripción de la actividad. El código es limpio, funcional y sigue buenas prácticas al usar el operador módulo para determinar si un número es par."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, utilizando `reduce` de manera concisa. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. Utiliza `replace` con una expresión regular para reemplazar todos los espacios, lo cual es eficiente y legible."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código utiliza correctamente una IIFE con closure para mantener el contador interno y generar IDs únicos de manera consistente. Cumple con todos los requisitos."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza la recursión de manera correcta para invertir la cadena. Los ejemplos de prueba son adecuados."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza la sintaxis de función flecha con parámetro rest y reduce correctamente para sumar los argumentos. El código es conciso y funciona como se espera."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y demuestra un buen entendimiento de las funciones de orden superior y callbacks."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función cumple con la validación básica solicitada, pero la validación de correos electrónicos es mucho más compleja. Deberías considerar usar expresiones regulares para una validación más robusta y completa."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es limpio, funcional y demuestra un buen entendimiento del uso de `setTimeout` con funciones anónimas."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con todos los requisitos de la actividad. El uso de la función flecha y `reduce` es apropiado y eficiente."
      }
    ],
    "overallScore": 4.65,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.7/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:27:11.524Z",
    "evaluatedBy": "Sistema de Evaluación"
  }
}